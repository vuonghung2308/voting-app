apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: voting-app-template
  annotations:
    description: "A simple voting app"
    iconClass: "icon-voting-app"
    tags: "database,nosql,dotnet,nodejs"
objects:
- kind: Secret
  apiVersion: v1
  metadata:
    name: postgres
    labels:
      template: voting-app
  stringData:
    database-name: ${DATABASE_NAME}
    database-password: ${DATABASE_PASSWORD}
    database-user: ${DATABASE_USER}
  type: Opaque

- kind: Secret
  apiVersion: v1
  metadata:
    name: redis
    labels:
      template: voting-app
  stringData:
    database-password: ${REDIS_PASSWORD}
  type: Opaque

- kind: Deployment
  apiVersion: apps/v1
  metadata:
    name: postgres
    labels:
      template: voting-app
  spec:
    replicas: 1
    selector:
      matchLabels:
        name: postgres
    template:
      metadata:
        labels:
          name: postgres
      spec:
        volumes:
          - name: postgres-data
            emptyDir: {}
        containers:
          - resources:
              limits:
                memory: 512Mi
            readinessProbe:
              exec:
                command:
                  - /usr/libexec/check-container
              initialDelaySeconds: 5
              timeoutSeconds: 1
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            terminationMessagePath: /dev/termination-log
            name: postgresql
            livenessProbe:
              exec:
                command:
                  - /usr/libexec/check-container
                  - '--live'
              initialDelaySeconds: 120
              timeoutSeconds: 10
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            env:
              - name: POSTGRESQL_USER
                valueFrom:
                  secretKeyRef:
                    name: postgres
                    key: database-user
              - name: POSTGRESQL_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: postgres
                    key: database-password
              - name: POSTGRESQL_DATABASE
                valueFrom:
                  secretKeyRef:
                    name: postgres
                    key: database-name
            ports:
              - containerPort: 5432
                protocol: TCP
            volumeMounts:
              - name: postgres-data
                mountPath: /var/lib/pgsql/data
            image: 'image-registry.openshift-image-registry.svc:5000/openshift/postgresql@sha256:5db804ee8fc286e8f82163a232ed36303a81d62daf450e1b09b3c18a5bccde82'

- kind: Deployment
  apiVersion: apps/v1
  metadata:
    name: redis
    labels:
      template: voting-app
  spec:
    replicas: 1
    selector:
      matchLabels:
        name: redis
    template:
      metadata:
        labels:
          name: redis
      spec:
        volumes:
          - name: redis-data
            emptyDir: {}
        containers:
          - resources:
              limits:
                memory: 512Mi
            readinessProbe:
              exec:
                command:
                  - /bin/sh
                  - '-i'
                  - '-c'
                  - test "$(redis-cli -h 127.0.0.1 -a $REDIS_PASSWORD ping)" == "PONG"
              initialDelaySeconds: 5
              timeoutSeconds: 1
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            terminationMessagePath: /dev/termination-log
            name: redis
            livenessProbe:
              tcpSocket:
                port: 6379
              initialDelaySeconds: 30
              timeoutSeconds: 1
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            env:
              - name: REDIS_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: redis
                    key: database-password
            ports:
              - containerPort: 6379
                protocol: TCP
            volumeMounts:
              - name: redis-data
                mountPath: /var/lib/redis/data
            image: 'image-registry.openshift-image-registry.svc:5000/openshift/redis@sha256:ac147d1915b4bdc7c1c996226280f35d0d7816856f175c23867be7d5e173093b'

- kind: Service
  apiVersion: v1
  metadata:
    name: redis
    labels:
      template: voting-app
  spec:
    ports:
      - name: redis
        protocol: TCP
        port: 6379
        targetPort: 6379
    type: ClusterIP
    selector:
      name: redis

- kind: Service
  apiVersion: v1
  metadata:
    name: db
    labels:
      template: voting-app
  spec:
    ports:
      - name: postgresql
        protocol: TCP
        port: 5432
        targetPort: 5432
    type: ClusterIP
    selector:
      name: postgres


- kind: BuildConfig
  apiVersion: build.openshift.io/v1
  metadata:
    name: workerapp
    labels:
      app: workerapp
      template: voting-app
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: 'workerapp:latest'
    successfulBuildsHistoryLimit: 2
    failedBuildsHistoryLimit: 2
    strategy:
      type: Docker
      dockerStrategy:
        dockerfilePath: Dockerfile
    source:
      type: Git
      git:
        uri: 'https://github.com/vuonghung2308/voting-app.git'
      contextDir: /worker

- kind: BuildConfig
  apiVersion: build.openshift.io/v1
  metadata:
    name: voteapp
    labels:
      app: voteapp
      template: voting-app
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: 'voteapp:latest'
    successfulBuildsHistoryLimit: 2
    failedBuildsHistoryLimit: 2
    strategy:
      type: Docker
      dockerStrategy:
        dockerfilePath: Dockerfile
    source:
      type: Git
      git:
        uri: 'https://github.com/vuonghung2308/voting-app.git'
      contextDir: /vote

- kind: BuildConfig
  apiVersion: build.openshift.io/v1
  metadata:
    name: resultapp
    labels:
      app: resultapp
      template: voting-app
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: 'resultapp:latest'
    successfulBuildsHistoryLimit: 2
    failedBuildsHistoryLimit: 2
    strategy:
      type: Docker
      dockerStrategy:
        dockerfilePath: Dockerfile
    source:
      type: Git
      git:
        uri: 'https://github.com/vuonghung2308/voting-app.git'
      contextDir: /result

- kind: ImageStream
  apiVersion: image.openshift.io/v1
  metadata:
    name: resultapp
    labels:
      app: resultapp
      template: voting-app
  spec:
    lookupPolicy:
      local: false

- kind: ImageStream
  apiVersion: image.openshift.io/v1
  metadata:
    name: voteapp
    labels:
      app: voteapp
      template: voting-app
  spec:
    lookupPolicy:
      local: false

- kind: ImageStream
  apiVersion: image.openshift.io/v1
  metadata:
    name: workerapp
    labels:
      app: workerapp
      template: voting-app
  spec:
    lookupPolicy:
      local: false

- kind: Deployment
  apiVersion: apps/v1
  metadata:
    name: resultapp
    labels:
      app: resultapp
      template: voting-app
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: resultapp
    template:
      metadata:
        labels:
          app: resultapp
      spec:
        containers:
          - name: resultapp
            ports:
              - name: user-port
                containerPort: 8080
                protocol: TCP
            env:
              - name: DATABASE_HOST
                value: db
              - name: DATABASE_USER
                valueFrom:
                  secretKeyRef:
                    name: postgres
                    key: database-user
              - name: DATABASE_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: postgres
                    key: database-password
              - name: DATABASE_NAME
                valueFrom:
                  secretKeyRef:
                    name: postgres
                    key: database-name
            imagePullPolicy: Always
            image: 'image-registry.openshift-image-registry.svc:5000/vuonghung2308-dev/resultapp:latest'
        restartPolicy: Always

- kind: Deployment
  apiVersion: apps/v1
  metadata:
    name: voteapp
    labels:
      app: voteapp
      template: voting-app
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: voteapp
    template:
      metadata:
        labels:
          app: voteapp
      spec:
        containers:
          - name: voteapp
            ports:
              - name: user-port
                containerPort: 8080
                protocol: TCP
            imagePullPolicy: Always
            env:
              - name: REDIS_HOST
                value: redis
              - name: REDIS_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: redis
                    key: database-password
            image: 'image-registry.openshift-image-registry.svc:5000/vuonghung2308-dev/voteapp:latest'
        restartPolicy: Always

- kind: Deployment
  apiVersion: apps/v1
  metadata:
    name: workerapp
    labels:
      app: workerapp
      template: voting-app
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: workerapp
    template:
      metadata:
        labels:
          app: workerapp
      spec:
        containers:
          - name: workerapp
            ports:
              - name: user-port
                containerPort: 8080
                protocol: TCP
            env:
              - name: DATABASE_HOST
                value: db
              - name: DATABASE_USER
                valueFrom:
                  secretKeyRef:
                    name: postgres
                    key: database-user
              - name: DATABASE_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: postgres
                    key: database-password
              - name: DATABASE_NAME
                valueFrom:
                  secretKeyRef:
                    name: postgres
                    key: database-name
              - name: REDIS_HOST
                value: redis
              - name: REDIS_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: redis
                    key: database-password
            imagePullPolicy: Always
            image: 'image-registry.openshift-image-registry.svc:5000/vuonghung2308-dev/workerapp:latest'
        restartPolicy: Always

- kind: Service
  apiVersion: v1
  metadata:
    name: resultapp
    labels:
      app: resultapp
      template: voting-app
  spec:
    ports:
      - name: user-port
        protocol: TCP
        port: 8080
        targetPort: 8080
    type: ClusterIP
    selector:
      app: resultapp

- kind: Service
  apiVersion: v1
  metadata:
    name: voteapp
    labels:
      app: voteapp
      template: voting-app
  spec:
    ports:
      - name: user-port
        protocol: TCP
        port: 8080
        targetPort: 8080
    type: ClusterIP
    selector:
      app: voteapp

- kind: Route
  apiVersion: route.openshift.io/v1
  metadata:
    name: resultapp
    labels:
      app: resultapp
      template: voting-app
  spec:
    to:
      kind: Service
      name: resultapp
    port:
      targetPort: user-port

- kind: Route
  apiVersion: route.openshift.io/v1
  metadata:
    name: voteapp
    labels:
      app: voteapp
      template: voting-app
  spec:
    to:
      kind: Service
      name: voteapp
    port:
      targetPort: user-port

parameters:
- name: DATABASE_NAME
  description: "Database name"
  required: true
  value: "postgres"
- name: DATABASE_USER
  description: "Database user"
  required: true
  value: "postgres"
- name: DATABASE_PASSWORD
  description: "Database password"
  required: true
  generate: expression
  from: '[A-Z0-9]{8}'
- name: REDIS_PASSWORD
  description: Redis password
  generate: expression
  from: '[A-Z0-9]{8}'
  required: true
labels:
  template: voting-app